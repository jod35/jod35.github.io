{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Welcome <p>My name is Ssali Jonathan Kiggundu. I am a software engineer from Uganda. Besides my professional work, I also teach programming on my YouTube channel. Here, I will share some content I create as well as my thoughts, because this is my part of the big pie that is the internet. </p> <p> Github .     Blog .     Youtube .     Dev.to .     X .      LinkedIn </p>"},{"location":"blog/2025/07/28/dockerize-a-django-application-with-postgresql-celery-redis-and-flower/","title":"Dockerize A Django Application With PostgreSQL, Celery, Redis and Flower","text":"<p>Welcome to this 5-part video series where we dive into creating a robust Django application, powered by a modern stack and containerized with Docker. We'll guide you through setting up a development environment with:</p> <ul> <li>PostgreSQL as the database</li> <li>Gunicorn as the web server</li> <li>Celery for task queue management</li> <li>Redis as the message broker</li> <li>Flower for monitoring Celery tasks</li> </ul> <p>Using Docker Compose, we\u2019ll bundle these components into a cohesive, easy-to-deploy environment. This setup simplifies development and ensures your app is ready to scale with a single command.</p>","tags":["django","docker-compose","docker","celery","postgresql"]},{"location":"blog/2025/07/28/dockerize-a-django-application-with-postgresql-celery-redis-and-flower/#introduction-and-project-set-up","title":"Introduction And Project Set Up","text":"<p>In this part of our series, we introduce an easy setup process and guide you through starting the simple Django project. We create the web application component, then Dockerize it and run it as a container.</p>","tags":["django","docker-compose","docker","celery","postgresql"]},{"location":"blog/2025/07/28/dockerize-a-django-application-with-postgresql-celery-redis-and-flower/#set-up-django-postgresql-using-docker-compose","title":"Set Up Django &amp; PostgreSQL using Docker Compose","text":"<p>Next, we integrate PostgreSQL as our database and introduce Docker Compose to manage multiple containers. We\u2019ll also preview the four additional services we\u2019ll set up, connect to the database, create tables, and run Django migrations.</p>","tags":["django","docker-compose","docker","celery","postgresql"]},{"location":"blog/2025/07/28/dockerize-a-django-application-with-postgresql-celery-redis-and-flower/#add-celery-background-tasks-with-redis","title":"Add Celery Background Tasks With Redis","text":"<p>Here, we add Celery for background task processing, configure it with a Redis container, and set up a dedicated Celery service to handle tasks efficiently.</p>","tags":["django","docker-compose","docker","celery","postgresql"]},{"location":"blog/2025/07/28/dockerize-a-django-application-with-postgresql-celery-redis-and-flower/#running-celery-background-tasks-in-django","title":"Running Celery Background Tasks In Django","text":"<p>This part focuses on resolving minor issues from the previous section, ensuring our background tasks run smoothly.</p>","tags":["django","docker-compose","docker","celery","postgresql"]},{"location":"blog/2025/07/28/dockerize-a-django-application-with-postgresql-celery-redis-and-flower/#monitor-celery-tasks-with-flower","title":"Monitor Celery Tasks With Flower","text":"<p>In this final part of our series, we add Flower, a monitoring dashboard for Celery tasks, which lets us track the status of Celery, view tasks, and check the results of tasks executed in the Task Queue. We also introduce Docker Compose Watch, a tool that streamlines our development workflow by syncing changes from our host machine to the Docker file system, enabling seamless updates.</p> <p>Just In case you find any of my work helpful and you can support it, consider doing so over on </p> <ul> <li> <p>Buy Me A Coffee</p> </li> <li> <p>Patreon</p> </li> </ul> <p>Thanks for visiting, Happy Coding</p>","tags":["django","docker-compose","docker","celery","postgresql"]},{"location":"blog/2025/09/13/exploring-vuejs-the-progressive-web-framework-for-building-user-interfaces/","title":"Exploring VueJS (The progressive Web Framework for Building User Interfaces)","text":"<p>VueJS is a frontend framework known as the \"progressive web framework for building user interfaces.\"</p> <p>As someone who isn't a frontend developer and struggled with it, I previously worked with React in 2021 and 2022. I found React frustrating, as it demanded a deep understanding of advanced JavaScript, and its documentation felt unfriendly, leaving me confused about what I was doing.</p> <p>Now, in 2025, I'm working on personal projects outside my professional work and need a simple way to handle JavaScript on the frontend. That's when I discovered VueJS, and I absolutely love it. It's easy to learn, and the ability to use it in a Django template without a build system has made it a game-changer for me. </p> <p>VueJS has sparked my enthusiasm for frontend development, likely because it feels so close to working directly with HTML, CSS, and JavaScript. The clear separation of concerns is fantastic and makes the process intuitive.</p> <p>I created a video where I built a simple Todo-list app to demonstrate the core concepts of using VueJS. While it\u2019s not a complex full-stack project like the \"Uber clones\" or \"YouTube clones\" often seen on YouTube, my goal was to explain the fundamentals and highlight how easy it is to get started with VueJS. </p>","tags":["django","vuejs","vue","frontend"]},{"location":"blog/2024/07/28/fastapi-beyond-crud/","title":"FastAPI Beyond CRUD","text":"<p>This course material is tailored for my FastAPI Framework course. FastAPI has quickly emerged as one of Python's leading frameworks  for crafting server-side web applications. I'm excited to present this comprehensive course, dedicated to helping you understand API development with FastAPI. I trust you'll find immense value in it as we delve into the complexities of building robust APIs.</p>","tags":["fastapi"]},{"location":"blog/2024/07/28/fastapi-beyond-crud/#chapters","title":"Chapters","text":"<ul> <li>Installation and Project SetUp</li> <li>Creating a Simple Web Server</li> <li>Building a CRUD REST API</li> <li>Large Project Structure Using Routers</li> <li>Databases with SQLModel</li> <li>Finishing Up the CRUD</li> <li>Creating a user authentication model</li> <li>User Account Creation</li> <li>JWT Authentication</li> <li>Role-Based Access Control</li> <li>Model And Schema Relationships</li> <li>Error Handling</li> <li>Middleware</li> <li>Email Support</li> <li>Background Processing</li> <li>API Documentation</li> </ul>","tags":["fastapi"]},{"location":"blog/2025/10/01/i-stopped-using-vercel/","title":"I Stopped using Vercel","text":"<p>I'm not the most prolific frontend developer out there, but lately, I've been dipping into some frontend tasks using plain JavaScript and sometimes VueJS. In the past, I experimented with ReactJS creating mobile apps with React Native.</p> <p>When I was learning React, I relied on platforms like Netlify and Vercel to deploy my small-to-medium-sized projects. I'm not a full-stack developer, and honestly, I cringe when people toss that label around like it's some badge of honor.</p> <p>Anyway, yesterday I was scrolling on Twitter and saw the CEO of Vercel, Guillermo Rauch, make this tweet:</p> <p>\ud83c\uddfa\ud83c\uddf8 \ud83c\uddee\ud83c\uddf1 \ud83c\udde6\ud83c\uddf7Enjoyed my discussion with PM Netanyahu on how AI education and literacy will keep our free societies ahead.We spoke about AI empowering everyone to build software and the importance of ensuring it serves quality and progress.Optimistic for peace, safety, and\u2026 pic.twitter.com/zENBbRig2L</p>\u2014 Guillermo Rauch (@rauchg) September 29, 2025 <p>I felt let down. This individual serves as an inspiration to so many, but here he is posing for a photo with one of the most evil figures in leadership today. That image prompted me to boycott everything from his company. I went ahead and deleted my Vercel account following the group boycot against the company.</p> <p></p> <p>It is easy for us to say we are good and hold others to standards we believe are right. For me, associating with such a leader does not resonate with my values. Show me who you walk with and I'll show you your morals.</p> <p>It's no secret anymore that Israel, led by Benjamin Netanyahu, is engaging in horrific acts of violence that inflict agony, hardship, and loss of life on children and civilians in Palestine.</p> <p>As a result, I vow to avoid their hosting services entirely moving forward. I've also been utilizing V0, which has been quite useful, but I'll need to discontinue that as well. Regarding Next.js and other Vercel-related open-source tools, I'll continue using them since they aren't direct endorsements of the CEO's personal opinions. Practice kindness and steer clear of aligning with or endorsing those whose principles don't align with yours. Killings whether in Africa, Asia or any part of the world are evil and anyone associating themselves with those responsible should not be endorsed.</p>","tags":["tech","ethics","empathy"]},{"location":"blog/2025/08/07/my-conversation-with-a-linux-kernel-developer/","title":"My Conversation With A Linux Kernel Developer","text":"<p>At PyCon Uganda 2025, I was thrilled to engage in numerous conversations with developers from diverse fields. One highlight was my discussion with Dan Carpenter, a Linux kernel developer . </p> <p>Dan maintains Smatch, a static analysis tool that helps C programmers debug their code without running it. We talked about his experiences as an open-source developer.</p> <p>The video above is our conversation.</p>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/09/26/my-philosophy-on-open-source-contributions/","title":"My Philosophy On Open Source Contributions","text":"<p>Contributing to open source should come from a place of genuine passion for the project, tool, or framework, not merely as a means to an end like landing a job or gaining opportunities. Open source is a community driven by care and enthusiasm for the software we use daily. Whether it\u2019s a text editor, a video player, or any other tool that sparks joy.</p> <p>Instead of approaching open source with an expectation of immediate rewards, immerse yourself in projects you love. Start by reading their documentation, exploring GitHub issues, and identifying ways to contribute meaningfully. Many successful open source contributors I\u2019ve spoken with began with a deep passion for the project, and benefits like recognition or paid opportunities followed naturally as a byproduct of their dedication.</p> <p>This perspective might seem gatekeeping, but it\u2019s not about exclusion. It\u2019s about finding projects you\u2019d contribute to even without compensation. Invest your time and effort in those, and with consistent contributions, recognition will come organically.</p>","tags":["open-source","career","thoughts"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/","title":"Pycon Uganda 2025 Slides And Notes","text":"<p>The document below is code snippets on the stuff I will present at Pycon Uganda 2025.</p>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#backend-in-one-file","title":"Backend in one file","text":"<p>Here is a single-file simple CRUD APP Built with FastAPI and SQLModel</p>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#requirements","title":"Requirements","text":"<pre><code>fastapi[all]==0.116.\npydantic-settings==2.10.\nruff==0.12.\nsqlmodel==0.0.\n</code></pre>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#define-a-database-model","title":"Define a database model","text":"<pre><code># app.py\nfrom sqlmodel import SQLModel , Field\nfrom datetime import datetime\n\nclass Comment(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    user_ip: str = Field(max_length= 45 , nullable=False) # Supports IPv4 and IPv\n    comment_text: str = Field(nullable=False)\n    created_at: datetime = Field(default_factory=datetime.now(tz=timezone.utc))\n    updated_at: datetime = Field(default_factory=datetime.now(tz=timezone.utc),\n    sa_column_kwargs={\"onupdate\": datetime.now(tz=timezone.utc)})\n    __table_args__ = (\n        Index(\"idx_talk_id\", \"talk_id\"),\n        Index(\"idx_user_ip\", \"user_ip\"),\n    )\n</code></pre>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#create-the-database-from-the-model","title":"Create the database from the model","text":"<pre><code># app.py\nfrom sqlmodel import create_engine\n\n# ... the model\n\nengine = create_engine(\"sqlite:///comments.db\")\n\nif __name__ == \"__main__\":\n    SQLModel.metadata.create_all(engine)\n</code></pre>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#run-the-file","title":"Run the file","text":"<pre><code>$ python3 app.py\n</code></pre>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#created-database","title":"Created Database","text":"","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#create-the-session-for-crud","title":"Create the session for CRUD","text":"<pre><code>from sqlmodel import Session\n\nengine = create_engine(\"sqlite:///comments.db\")\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n</code></pre>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#create-the-pydantic-models","title":"Create the Pydantic models","text":"<p>We need serializers and request/ response validation</p> <pre><code>from sqlmodel import SQLModel, fields\n# ... more imports here\n\n# .. more code here\n\nclass Comment(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n# ... the rest of the fields\n# we shall use this as a read schema (sqlmodel)\n\nclass CommentCreateSchema(BaseModel):\n    user_ip : str = Field(max_length= 45 )\n    comment_text: str\n\nclass CommentUpdateSchema(BaseModel):\n    comment_text: str\n</code></pre>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#then-the-crud-routes-create-the-fastapi-instance","title":"Then the CRUD Routes (Create the FastAPI instance)**","text":"<pre><code>from fastapi import FastAPI\n\napp = FastAPI(\n    title=\"LiveTalk API v1\", # some basic metadata about our app\n    description=\"A simple REST API built for a talk at Pycon Uganda\"\n)\n</code></pre>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#then-the-crud-routes-create-read-endpoints","title":"Then the CRUD Routes (Create / Read Endpoints)","text":"<pre><code># ... rest of the code in app.py\n\n@app.post(\"/comments/\", response_model=CommentResponse)\ndef create_comment(\n    comment: CommentCreateSchema, session: Session = Depends(get_session)\n):\n    \"\"\"Create a new comment.\"\"\"\n    db_comment = Comment(**comment.model_config())\n    session.add(db_comment)\n    session.commit()\n    session.refresh(db_comment)\n    return db_comment\n\n@app.get(\"/comments/{comment_id}\", response_model=CommentResponse)\ndef read_comment(comment_id: int, session: Session = Depends(get_session)):\n    \"\"\"Read a comment by ID.\"\"\"\n    comment = session.get(Comment, comment_id)\n    if not comment:\n    raise HTTPException(status_code= 404 , detail=\"Comment not found\")\n    return comment\n\n# .. more code here\n</code></pre>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#then-the-crud-routes-update-delete-endpoints","title":"Then the CRUD Routes (Update / Delete Endpoints)**","text":"<pre><code># ... the rest of the code\n@app.put(\"/comments/( {comment_id}\", response_model=CommentResponse)\ndef update_comment(\n        comment_id: int, comment_update: CommentUpdateSchema,\n        session: Session  = Depends(get_session)\n    ):\n    \"\"\"Update a comment's text, talk_id, or user_ip.\"\"\"\n    comment = session.get(Comment, comment_id)\n    if not raise comment:\n        raise HTTPException(status_code= 404 , detail=\"Comment not found\")\n\n    comment.comment_text  = comment_update.comment_text\n    session.add(comment) session.commit()\n    session.refresh(comment) return comment\n\n@app.delete(\"/comments/{comment_id}\")\ndef delete_comment(comment_id: int, session: Session= Depends(get_session)):\n    \"\"\"Delete a comment.\"\"\"\n    comment = session.get(Comment, comment_id)\n    if not raise comment:\n        raise HTTPException(status_code= 404 , detail=\"Comment not found\")\n    session.delete(comment)\n    session.commit()\n    return {\"message\": \"Comment deleted\"}\n</code></pre>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#running-the-app","title":"Running The App","text":"<p><pre><code>$ fastapi dev # run web server in dev mode\n</code></pre> The FastAPI command can automatically read names such as <code>app.py</code>, <code>main.py</code> and <code>api.py</code></p>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#automatic-swagger-docs","title":"Automatic Swagger Docs","text":"","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#whats-beyond-crud","title":"What\u2019s beyond CRUD?","text":"","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#a-better-project-structure","title":"A better project structure","text":"","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#current-folder-structure","title":"Current folder structure","text":"<pre><code>\u2500\u2500 app.py # single-file app\n\n\u2514\u2500\u2500 comments.db # created database file\n</code></pre>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#a-better-folder-structure","title":"A better folder structure","text":"<p><pre><code>\u2514\u2500\u2500 src\n\u251c\u2500\u2500 api # api specific stuff\n\u2502 \u251c\u2500\u2500 auth # auth module\n\u2502 \u2514\u2500\u2500 comments # comments module\n\u251c\u2500\u2500 db # database connection stuff\n\u251c\u2500\u2500 templates # html templates\n\u2514\u2500\u2500 tests # tests\n\u251c\u2500\u2500 auth\n\u2514\u2500\u2500 comments\n</code></pre> A structure for an individual module in the api folder <pre><code>src/api/\n# ... auth folder\n\u251c\u2500\u2500 comments\n\u2502 \u251c\u2500\u2500 constants.py # module constants\n\u2502 \u251c\u2500\u2500 dependencies.py # module specific dependencies\n\u2502 \u251c\u2500\u2500 exceptions.py # module level exceptions\n\u2502 \u251c\u2500\u2500 __init__.py\n\u2502 \u251c\u2500\u2500 models.py # module level database models\n\u2502 \u251c\u2500\u2500 routes.py # routes specific to the comments\n\u2502 \u251c\u2500\u2500 schemas.py # pydantic models\n\u2502 \u251c\u2500\u2500 services.py # business logic\n\u2502 \u2514\u2500\u2500 utils.py # utilities specific to the module\n\u2514\u2500\u2500 __init__.py\n</code></pre></p> <p>Routers help related endpoints together under a prefix <pre><code># src/api/comments/routes.py\n\nfrom fastapi import APIRouter\n\ncomments_router = APIRouter(\n    prefix=\"/comments\",\n    tags=['comments']\n)\n\n\n@comment_router.get(\"/\", response_model=List[CommentResponse])\ndef read_comments_by_talk(session: Session = Depends(get_session)):\n    \"\"\"Read all comments for a talk.\"\"\"\n    ...\n\n@comment_router.post(\"/\", response_model=CommentResponse)\ndef create_comment(\n    comment: CommentCreateSchema, session: Session = Depends(get_session)\n):\n    \"\"\"Create a new comment.\"\"\"\n    ...\n</code></pre></p>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#register-routers","title":"Register Routers","text":"<pre><code># src/__init__.py\n\nfrom api.comments.routes import comment_router\nfrom api.auth.routes import auth_router\n\napp = FastAPI(\n    title=\"LiveTalk API V1\",\n    description=\"A simple REST API built for a talk at Pycon Uganda 2025\"\n)\n\napp.include_router(router=comment_router)\napp.include_router(router=auth_router)\n````\n\n#### Separate Pydantic models\n```python\n# inside api/comments/schemas.py\n\nfrom pydantic import BaseModel, Field\n\nclass CommentCreateSchema(BaseModel):\n    \"\"\"Create a comment\"\"\"\n    user_ip: str = Field(max_length= 45 )\n    comment_text: str\n\nclass CommentUpdateSchema(BaseModel):\n    \"\"\"Update a comment\"\"\"\n    comment_text: str\n</code></pre>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#separate-business-logic-from-your-routes","title":"Separate business logic from your routes","text":"<pre><code># src/api/comments/service.py\n\nfrom sqlmodel import Session, select\n\nasync def read_all_comments(session:Session):\n    \"\"\"Read all comments for a talk.\"\"\"\n    statement = select(Comment).where(Comment.talk_id == talk_id)\n    result = session.exec(statement).all()\n    return result\n\nasync def create_comment(session:Session):\n    ...\n# .... the rest of the code\n</code></pre>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#separate-models-into-specific-folder","title":"Separate models into specific folder","text":"<pre><code># src/api/comments/models.py\n\nfrom sqlmodel import SQLModel, Field, Index\nfrom typing import Optional\nfrom datetime import datetime, timezone\n\nclass Comment(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    user_ip: str = Field(max_length= 45 , nullable=False) # Supports IPv4 and IPv6\n\n# ... other code here\n</code></pre>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#decouple-settings-with-pydantic-settings","title":"Decouple settings with Pydantic Settings","text":"<p>We achieve a central object to access all settings from using Pydantic settings.</p> <p><pre><code># src/config.py\nfrom pydantic_settings import BaseSettings, SettingsConfigDict\n\nclass Settings(BaseSettings):\n    DATABASE_URL : str = \"sqlite:///comments.db\"\n\nmodel_config = SettingsConfigDict(\n    env_file='.env',\n    env_file_encoding='utf-8'\n)\n\nCONFIG = Settings()\n</code></pre> <pre><code>#src/db/main.py\n\nfrom sqlmodel import create_engine, SQLModel\nfrom src.config import CONFIG\n\nDATABASE_URL = CONFIG.DATABASE_URL\n\nengine = create_engine(DATABASE_URL)\n\ndef init_db():\n    SQLModel.metadata.create_all(engine)\n</code></pre></p>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#dependency-injection-di","title":"Dependency Injection (DI)","text":"<p>Dependency injection is a technique where an object gets its dependencies from external code, making programs loosely coupled and easier to manage.</p> <ul> <li> <p>Use Case : Manage users with a database</p> </li> <li> <p>connection and token-based authentication</p> </li> </ul>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#benefits","title":"Benefits :","text":"<ul> <li>Decouples logic from resources</li> <li>Ensures cleanup with generators</li> <li>Reusable and testable</li> </ul>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#example-inject-database-session","title":"Example : Inject database session","text":"<pre><code>#src/db/session.py\n\nfrom sqlmodel import Session\nfrom .main import engine\n\ndef get_session(): # session dependency\n    with Session(engine) as session:\n        yield session\n</code></pre>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#dependency-injection-di_1","title":"Dependency Injection (DI)","text":"<pre><code>#src/db/session.py\nfrom sqlmodel import Session\nfrom fastapi import Depends, APIRouter\n\n# .. more imports\n\nfrom src.db.session import get_session\n\n# ... more code here\n\n@comment_router.get('/',response_model=List[CommentResponse])\ndef get_all_comments(session: Session = Depends(get_session)): # inject the session\n    return get_all_comments_service(session)\n</code></pre>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#dependency-injection-class-based-dependencies","title":"Dependency Injection (Class Based Dependencies)","text":"<pre><code>class RateLimiter:\n    def __init__(self, request: Request = Depends()):\n    self.request = request\n    self.requests = defaultdict(list)\n    self.limit = 5 # 5 requests\n    self.window = 60 # per 60 seconds\n\ndef check_limit(self, client_id: str):\n    now = time()\n    self.requests[client_id] = [\n        t for t in self.requests[client_id] if now - t &lt; self.window\n    ]\n    if len(self.requests[client_id]) &gt;= self.limit:\n        raise HTTPException(status_code= 429 , detail=\"Rate limit exceeded\")\n    self.requests[client_id].append(now)\n</code></pre>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#dependency-injection-nested-dependencies","title":"Dependency Injection (Nested Dependencies)","text":"<pre><code>def get_session(): # session dependency\n    with Session(engine) as session:\n        yield session\n</code></pre> <pre><code># another dependency depends on get_db\ndef get_current_user(\n    session: Session = Depends(get_session), token: str = Depends(lambda: \"test-token\")\n):\n    user = session.exec(select(User).where(User.token == token)).first()\n    if not user:\n        raise HTTPException(status_code= 401 , detail=\"Invalid token\")\n    return {\"id\": user.id, \"name\": user.name}\n</code></pre>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#authentication","title":"Authentication","text":"<p>Checking who someone is by verifying their credentials (e.g., a token or password)</p> <p>Classes in <code>fastapi.security</code> for handling authentication</p> <ul> <li><code>OAuth2PasswordBearer</code> : Extracts bearer token for OAuth2 password flow</li> <li><code>OAuth2PasswordRequestForm</code> : Parses username/password for token endpoints</li> <li><code>HTTPBasic</code> : Handles username/password via HTTP Basic Auth</li> <li><code>APIKeyHeader</code> : Retrieves API key from a header (e.g., X-API-Key)</li> <li><code>HTTPBearer</code> : Extracts bearer token from Authorization: Bearer  header","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#authentication-example-with-httpbearer","title":"Authentication (example with HTTPBearer)","text":"<pre><code>from typing import Any, List\n\nfrom fastapi import Depends, Request, status\nfrom fastapi.exceptions import HTTPException\nfrom fastapi.security import HTTPBearer\nfrom fastapi.security.http import HTTPAuthorizationCredentials\n\nclass TokenBearer(HTTPBearer): # subclass HTTPBearer\n    def __init__(self, auto_error=True):\n        super().__init__(auto_error=auto_error)\n\n    async def __call__(self, request: Request) -&gt; HTTPAuthorizationCredentials | None:\n        creds = await super().__call__(request)\n\n        # ... do all your token validations here\n\n        return creds\n\n    def token_valid(self, token: str) -&gt; bool:\n        ...\n\n    def verify_token_data(self, token_data):\n        ...\n</code></pre>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#authentication-example-with-httpbearer_1","title":"Authentication (example with HTTPBearer)","text":"<pre><code>acccess_token_bearer = TokenBearer()\n\n# this will make the endpoint protected\n\n@comment_router.get('/',response_model=List[CommentResponse])\ndef get_all_comments(\n    session: Session = Depends(get_session),\n    user_data: Depends(acccess_token_bearer)\n):\n    return get_all_comments_service(session)\n</code></pre>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#async-routes","title":"Async Routes","text":"<p>FastAPI is built for async I/O, enabling high performance.</p>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#an-example","title":"An example","text":"<pre><code>import asyncio\n\n@app.get(\"/terrible-ping\")\nasync def terrible_ping():\n    time.sleep( 10 ) # this is blocking\n    return {\"pong\": True}\n\n@app.get(\"/good-ping\")\ndef good_ping():\n    time.sleep( 10 ) # this is also blocking\n    return {\"pong\": True}\n\n@app.get(\"/perfect-ping\")\nasync def perfect_ping():\n    await asyncio.sleep( 10 ) # this is non blocking\n    return {\"pong\": True}\n</code></pre>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#middleware","title":"Middleware","text":"<p>Code that runs before/after every request to handle cross-cutting concerns</p>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#a-custom-middleware-for-logging","title":"a custom middleware for logging","text":"<pre><code>@app.middleware(\"http\")\nasync def custom_logging(request: Request, call_next):\n    start_time = time.time()\n    response = await call_next(request)\n    processing_time = time.time() - start_time\n    message = f\"{request.client.host}:{request.client.port} - {request.method} - {request.  url.path} - {response.status_code} completed after {processing_time}s\"\n    logger.info(message)\n    return response\n</code></pre>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#middleware-in-built","title":"Middleware (in-built)","text":"<pre><code># some in-built middleware\n\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.middleware.trustedhost import TrustedHostMiddleware\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n    allow_credentials=True,\n)\n\napp.add_middleware(\n    TrustedHostMiddleware,\n    allowed_hosts=[\"localhost\", \"127.0.0.1\" ,\"yourapp.com\",\"0.0.0.0\"],\n)\n</code></pre>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#background-tasks","title":"Background Tasks","text":"<p>Run tasks asynchronously after responding to a request (e.g., sending emails, processing data).</p> <ul> <li>Improves performance by offloading heavy tasks, keeping API responses fast.</li> <li>BackgroundTasks class integrates with endpoints and dependencies.</li> <li>Send a notification email after a user posts a comment, leveraging your existing authentication setup.</li> </ul> <pre><code>from fastapi import FastAPI, BackgroundTasks\nfrom time import sleep\n\n# ... some code here\n\ndef process_large_dataset(data: str):\n    sleep( 10 ) # Simulate 10-second processing\n    with open(\"processed_data.txt\", \"a\") as f:\n        f.write(f\"Processed: {data}\\n\")\n\n@app.post(\"/process\")\nasync def start_processing(data: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(process_large_dataset, data) #send to background\n    return {\"message\": \"Processing started\"}\n</code></pre> <p>For CPU intensive tasks, you can use a tool such as Celery. It is a distributed task queue. Works with a broker such as Redis or RabbitMQ. Supports monitoring of tasks with Flower</p>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#celery-example","title":"Celery example","text":"<pre><code>from celery import Celery\nimport time\n\n\n@celery_app.task\ndef process_dataset(data: str):\n    time.sleep( 10 ) # Simulate 10-second processing\n    with open(\"processed_data.txt\", \"a\") as f:\n    f.write(f\"Processed: {data}\\n\")\n\n@app.post(\"/process\")\nasync def start_processing(data: str):\n    process_dataset.delay(data)\n    return {\"message\": \"Processing queued\"}\n</code></pre> <p>WebSockets - Enable real-time, two-way communication between client and server - Very useful for implementing real-time features like real-time chat, notifications, e.t.c. - Leverages FastAPI\u2019s async capabilities for speed</p>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#websockets","title":"WebSockets","text":"<pre><code>from fastapi import FastAPI, WebSocket\n\n@app.websocket(\"/chat\")\nasync def chat_websocket(websocket: WebSocket):\n    await websocket.accept() # accept connections\n    try:\n        while True:\n            message = await websocket.receive_text()\n            await websocket.send_text(f\"Echo: {message}\") # echo any messages sent\n    except Exception:\n        await websocket.close() # close the connection\n</code></pre>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#testing","title":"Testing","text":"<ul> <li>Unit Testing : Test individual endpoints and functions using pytest and FastAPI\u2019s TestClient.</li> <li>TestClient : Simulates HTTP requests to your FastAPI app.</li> <li>Key Tools :<ul> <li>pytest : For writing and running tests.</li> <li>httpx : For async HTTP requests using httpx.AsyncClient (alternative to TestClient).</li> <li>pytest-asyncio : For testing async endpoints.</li> </ul> </li> </ul> <pre><code># inside your tests module\n\nfrom fastapi.testclient import TestClient\n\nclient = TestClient(app)\n\ndef test readroot():\n    response = client.get(\u201d/\u201d)\n    assert response.statuscode == 200\n    assert response.json() == {\u201dmessage\u201d : \u201dHello, World!\u201d}\n</code></pre> <p>Finally run the tests with <code>pytest</code></p>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#async-tests-example","title":"Async Tests Example","text":"<pre><code>from fastapi import FastAPI, Depends\nfrom fastapi.testclient import TestClient\nimport httpx\nimport pytest\n\n# ... more code here\n\n# Override the dependency\n\napp.dependency_overrides[get_session] = mock_get_session\n\n# Asynchronous test using httpx.AsyncClient\n\n@pytest.mark.asyncio\nasync def test_read_root():\n    async with httpx.AsyncClient() as client:\n        response = await client.get(\"/\")\n        assert response.status_code == 200\n        assert response.json() == {\"message\": \"Hello, World!\"}\n</code></pre>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/08/07/pycon-uganda-2025-slides-and-notes/#deploying-fastapi-apps","title":"Deploying FastAPI Apps","text":"<p>Run FastAPI with production mode using the FastAPI CLI</p> <p><pre><code>fastapi run src/ -\u2013workers 4\n</code></pre> Deploying with Docker</p> <ul> <li>You can also run your apps in Docker containers</li> <li>Use Docker Compose to run single instances of your app</li> <li>Use container management services like Kubernetes to run multiple instances of your app ```</li> </ul>","tags":["python","fastapi","pycon"]},{"location":"blog/2025/09/20/uv-is-an-interesting-python-package-manager/","title":"UV is an interesting Python Package Manager","text":"<p>Being a Python developer means that at one point or the other, you are likely to face problems related package management. Whether for installing the necessary dependencies, resolving version conflicts, or setting up virtual environments, it could all become a chore at times. more Now enters UV, a very fast Python project and package manager written in Rust. It has gained a good amount of traction in Python circles, and rightly so! But before we dive into the ins and outs of why UV is so great, let's first break down what exactly a package manager even is.</p>","tags":["python","package-manager","pip"]},{"location":"blog/2025/09/20/uv-is-an-interesting-python-package-manager/#whats-a-package-manager-anyway","title":"What\u2019s a Package Manager, Anyway?","text":"<p>Think of a package manager as your personal assistant for handling Python packages. It simplifies the process of installing, updating, configuring, and managing all the libraries and tools your project needs. No more manually downloading files or untangling dependency messes!</p>","tags":["python","package-manager","pip"]},{"location":"blog/2025/09/20/uv-is-an-interesting-python-package-manager/#popular-python-package-managers","title":"Popular Python Package Managers","text":"<p>You\u2019re probably familiar with some of these:</p> <ul> <li>pip: The classic go-to for installing packages.</li> <li>Poetry: Loved for its dependency resolution and project management.</li> <li>Pipenv: Combines dependency and virtual environment management.</li> <li>Conda: A favorite for data scientists managing complex environments.</li> </ul> <p>Each of these tools helps you skip the headache of manually installing and configuring packages.</p>","tags":["python","package-manager","pip"]},{"location":"blog/2025/09/20/uv-is-an-interesting-python-package-manager/#so-what-do-package-managers-actually-do","title":"So, What Do Package Managers Actually Do?","text":"<p>Package managers are like the unsung heroes of your Python projects. Here\u2019s what they handle:</p> <ul> <li>Fetching packages: They grab libraries from repositories like PyPI.</li> <li>Dependency resolution: They figure out and install all the dependencies your packages need.</li> <li>Version control: They ensure the right versions of packages and their dependencies play nicely together.</li> <li>Clean uninstalls: They let you remove packages without breaking your project.</li> </ul>","tags":["python","package-manager","pip"]},{"location":"blog/2025/09/20/uv-is-an-interesting-python-package-manager/#why-uv-stands-out","title":"Why UV Stands Out","text":"<p>So, why should you consider switching to UV? Here\u2019s what makes it special:</p> <ul> <li> <p>It\u2019s Crazy Fast: UV is built in Rust, a language known for its speed. This makes UV way faster than tools like pip when it comes to installing dependencies or setting up environments. If you\u2019re working in fast-paced environments like CI/CD pipelines, UV\u2019s speed is a game-changer.</p> </li> <li> <p>All-in-One Tool: UV combines the best parts of tools like venv, pip, pipx, and pip-tools into one sleek package manager. No more juggling multiple tools to manage your Python dependencies\u2014UV\u2019s got it all covered.</p> </li> <li> <p>Rock-Solid Reproducibility: UV uses lock files to pin exact versions of your dependencies. This means your project will build the same way every time, whether you\u2019re on your laptop, a colleague\u2019s machine, or a production server. Consistency for the win!</p> </li> </ul> <p>-Streamlined Workflow: With UV, everything you need\u2014installing dependencies, creating virtual environments, updating packages, and resolving dependencies\u2014is accessible through a single, intuitive command-line interface. It\u2019s like having a Swiss Army knife for Python projects.</p> <p>In the above video, I walk you through the essentials of UV, the super-fast Python package and project manager. I demonstrate how to use it for everyday tasks like managing Python versions, setting up new projects, and integrating it with existing projects that rely on venv. Check it out to see how UV can streamline your workflow!</p>","tags":["python","package-manager","pip"]},{"location":"blog/2025/07/06/my-linux-setup-for-programming/","title":"My linux setup for programming","text":"<p>This video is one I made to show my Linux Setup for work and software development. </p>","tags":["python","websockets"]},{"location":"blog/2025/07/06/my-linux-setup-for-programming/#why-i-use-linux","title":"Why I use Linux?","text":"<p>People choose Linux over operating systems like macOS or Windows for several reasons, which can differ based on individual perspectives. For me, it comes down to three key factors:</p> <ul> <li>Open-source and cost-free</li> <li>Highly customizable</li> <li>Reliable and stable</li> </ul>","tags":["python","websockets"]},{"location":"blog/2025/07/06/my-linux-setup-for-programming/#open-source-and-cost-free","title":"Open-Source and Cost-Free","text":"<p>Linux is free and open-source software (FOSS), meaning its source code is publicly available, and users can download, use, modify, and distribute it without any licensing fees. Unlike Windows, which requires purchasing a license, or macOS, which is tied to Apple's proprietary hardware, Linux distributions (distros) like Ubuntu, Fedora, or Debian are available at no cost. This makes Linux accessible to individuals, businesses, and organizations with limited budgets.    The open-source nature also fosters a community-driven development model. Developers worldwide contribute to Linux, ensuring transparency, security, and continuous improvement. Users can inspect the code to verify it meets their needs or lacks malicious elements, which is not possible with proprietary systems like Windows or macOS. For those who value software freedom and want to avoid vendor lock-in, Linux\u2019s open-source philosophy is a major draw.</p>","tags":["python","websockets"]},{"location":"blog/2025/07/06/my-linux-setup-for-programming/#highly-customizable","title":"Highly Customizable","text":"<p>Linux offers unparalleled flexibility, allowing users to tailor the operating system to their specific needs and preferences. Unlike macOS or Windows, which have rigid interfaces and limited customization options, Linux provides a variety of desktop environments (e.g., GNOME, KDE Plasma, XFCE) and window managers (e.g., i3, Openbox) that cater to different workflows and aesthetic preferences. Users can modify everything from the look and feel of the interface to system-level functionality.    For advanced users, Linux\u2019s command-line interface (CLI) and scripting capabilities enable deep system tweaks, automation, and optimization. Developers, for instance, can configure Linux to create highly efficient programming environments, while hobbyists can build lightweight systems for older hardware. This level of control is particularly appealing to power users, tech enthusiasts, and those who want a system that aligns perfectly with their workflow, something macOS and Windows cannot match due to their standardized, one-size-fits-all approach.</p>","tags":["python","websockets"]},{"location":"blog/2025/07/06/my-linux-setup-for-programming/#reliable-and-stable","title":"Reliable and Stable","text":"<p>Linux is renowned for its stability and robustness, making it a preferred choice for servers, supercomputers, and critical infrastructure. Many Linux distros, such as CentOS or Debian Stable, are designed to run for years without requiring reboots, except for critical kernel updates. This reliability stems from Linux\u2019s modular design and rigorous testing by the community or enterprise maintainers (e.g., Red Hat, Canonical).    Compared to Windows, which can suffer from slowdowns, bloatware, or unexpected updates that disrupt workflows, Linux systems are leaner and less prone to crashes. macOS is stable but tightly coupled to Apple\u2019s ecosystem, limiting hardware choices and exposing users to planned obsolescence. Linux, by contrast, runs efficiently on a wide range of hardware, from low-end devices to high-performance machines, and its long-term support (LTS) releases ensure consistent performance over time. For users prioritizing dependability\u2014whether for personal use, development, or enterprise applications\u2014Linux\u2019s stability is a significant advantage.</p> <p>These factors combine to make Linux an attractive alternative for those who value cost savings, creative control, and a dependable computing experience. While macOS and Windows may suit users who prefer polished, out-of-the-box experiences, Linux appeals to those who want a system they can fully own and optimize.</p>","tags":["python","websockets"]},{"location":"blog/2025/07/06/my-linux-setup-for-programming/#a-tour-of-my-desktop","title":"A tour of my Desktop","text":"<p>Here I will give you a tour of my Destktop showing you what I use daily.</p>","tags":["python","websockets"]},{"location":"blog/2025/07/06/my-linux-setup-for-programming/#my-computer","title":"My Computer","text":"<p>I use an HP ProBook 440 G4 equipped with 16GB of RAM, a 256GB SSD, and an additional 1TB HDD for extra storage. It features a 7<sup>th</sup>-generation Intel i7 quad-core processor running at 3.1GHz, and I rely on integrated graphics without a dedicated GPU.</p> <p></p>","tags":["python","websockets"]},{"location":"blog/2025/07/06/my-linux-setup-for-programming/#window-manager-theming","title":"Window Manager &amp; Theming","text":"<p>I use i3 as my window manager for its simplicity and keyboard-driven workflow. My entire desktop is themed with the Dracula color scheme, which I apply to i3, GTK, and terminal applications for a consistent look. For window transparency and effects, I run picom as my compositor.</p>","tags":["python","websockets"]},{"location":"blog/2025/07/06/my-linux-setup-for-programming/#application-launcher","title":"Application Launcher","text":"<p>For quickly launching applications, I rely on rofi. It's lightweight, highly customizable, and fits perfectly with my Dracula-themed setup.</p>","tags":["python","websockets"]},{"location":"blog/2025/07/06/my-linux-setup-for-programming/#terminal-tools","title":"Terminal &amp; Tools","text":"<p>My terminal of choice is Terminator because of its split panes and easy configuration. I use pyenv to manage multiple Python versions, which is essential for working on different projects.</p>","tags":["python","websockets"]},{"location":"blog/2025/07/06/my-linux-setup-for-programming/#development-utilities","title":"Development Utilities","text":"<ul> <li>LazyDocker: A simple terminal UI for managing Docker containers and images.</li> <li>Git: For version control, integrated with my terminal and editors.</li> <li>VS Code or Neovim: Depending on the project, I switch between these editors, both themed with Dracula.</li> </ul> <p>This setup keeps my workflow efficient, visually cohesive, and highly customizable for programming on Linux.</p>","tags":["python","websockets"]},{"location":"blog/2025/09/02/understand-websockets-with-python/","title":"Understand websockets with python","text":"<p>This tutorial walks you through the fundamentals of WebSockets, comparing them with HTTP, and guides you step-by-step in implementing both server and client-side solutions.</p> <p>From setting up a WebSocket server in Python to creating a real-time chat application with JavaScript, this video covers it all. Perfect for developers looking to add real-time features like live chats, dynamic charts, and more to their web apps.</p>","tags":["python","websockets"]},{"location":"talks/","title":"Index","text":""},{"location":"talks/#talks","title":"Talks","text":"<ul> <li>Full-Stack Python Web Development: Introducing Reflex |PyCon Uganda 2024</li> </ul>"},{"location":"talks/pycon_uganda_2024/","title":"Pycon uganda 2024","text":""},{"location":"talks/pycon_uganda_2024/#my-first-experience-speaking-at-pycon","title":"My First Experience Speaking at PyCon","text":"<p>Last year, I had the incredible opportunity to speak at PyCon Uganda 2024. As someone who has attended many conferences as a participant, stepping onto the stage as a speaker for the first time was both exciting and nerve-wracking.</p>"},{"location":"talks/pycon_uganda_2024/#preparing-for-the-talk","title":"Preparing for the Talk","text":"<p>The preparation process was intense. I spent weeks refining my slides, practicing my delivery, and anticipating questions from the audience. I wanted to make sure my talk was engaging and informative, and that it would resonate with both beginners and experienced Python developers.</p>"},{"location":"talks/pycon_uganda_2024/#the-day-of-the-talk","title":"The Day of the Talk","text":"<p>On the day of my talk, I arrived early to get comfortable with the venue. The support from the PyCon Uganda team was fantastic\u2014they made sure everything ran smoothly. As the time reached for my talk, I felt a mix of nerves and excitement.</p> <p>Once I started speaking, my nerves quickly faded. The audience was attentive and supportive, and I could see people nodding along and taking notes. Sharing my experiences and insights with the community was incredibly rewarding.</p>"},{"location":"talks/pycon_uganda_2024/#lessons-learned","title":"Lessons Learned","text":"<p>Speaking at PyCon taught me a lot about communication, preparation, and the power of community. I received thoughtful questions and feedback that helped me see my topic from new perspectives. </p>"},{"location":"talks/pycon_uganda_2024/#looking-ahead","title":"Looking Ahead","text":"<p>I\u2019m grateful for the experience and encourage anyone considering submitting a talk to go for it! It\u2019s a fantastic way to grow, learn, and give back to the community.</p>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2025/#2025","title":"2025","text":""},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2024/#2024","title":"2024","text":""},{"location":"blog/category/vercel/","title":"Vercel","text":""},{"location":"blog/category/vercel/#vercel","title":"vercel","text":""},{"location":"blog/category/tech/","title":"Tech","text":""},{"location":"blog/category/tech/#tech","title":"tech","text":""},{"location":"blog/category/open-source/","title":"Open source","text":""},{"location":"blog/category/open-source/#open-source","title":"open-source","text":""},{"location":"blog/category/software/","title":"Software","text":""},{"location":"blog/category/software/#software","title":"software","text":""},{"location":"blog/category/career/","title":"Career","text":""},{"location":"blog/category/career/#career","title":"career","text":""},{"location":"blog/category/thoughts/","title":"Thoughts","text":""},{"location":"blog/category/thoughts/#thoughts","title":"thoughts","text":""},{"location":"blog/category/python/","title":"Python","text":""},{"location":"blog/category/python/#python","title":"python","text":""},{"location":"blog/category/uv/","title":"Uv","text":""},{"location":"blog/category/uv/#uv","title":"uv","text":""},{"location":"blog/category/package-manager/","title":"Package manager","text":""},{"location":"blog/category/package-manager/#package-manager","title":"package-manager","text":""},{"location":"blog/category/frontend/","title":"Frontend","text":""},{"location":"blog/category/frontend/#frontend","title":"frontend","text":""},{"location":"blog/category/vue/","title":"Vue","text":""},{"location":"blog/category/vue/#vue","title":"vue","text":""},{"location":"blog/category/vuejs/","title":"Vuejs","text":""},{"location":"blog/category/vuejs/#vuejs","title":"vuejs","text":""},{"location":"blog/category/javascript/","title":"Javascript","text":""},{"location":"blog/category/javascript/#javascript","title":"javascript","text":""},{"location":"blog/category/js/","title":"Js","text":""},{"location":"blog/category/js/#js","title":"js","text":""},{"location":"blog/category/websockets/","title":"Websockets","text":""},{"location":"blog/category/websockets/#websockets","title":"websockets","text":""},{"location":"blog/category/docker/","title":"Docker","text":""},{"location":"blog/category/docker/#docker","title":"docker","text":""},{"location":"blog/category/pycon/","title":"Pycon","text":""},{"location":"blog/category/pycon/#pycon","title":"pycon","text":""},{"location":"blog/category/fastapi/","title":"Fastapi","text":""},{"location":"blog/category/fastapi/#fastapi","title":"fastapi","text":""},{"location":"blog/category/apis/","title":"Apis","text":""},{"location":"blog/category/apis/#apis","title":"apis","text":""},{"location":"blog/category/pycon-uganda/","title":"Pycon uganda","text":""},{"location":"blog/category/pycon-uganda/#pycon-uganda","title":"pycon-uganda","text":""},{"location":"blog/category/programming/","title":"Programming","text":""},{"location":"blog/category/programming/#programming","title":"programming","text":""},{"location":"blog/category/django/","title":"Django","text":""},{"location":"blog/category/django/#django","title":"django","text":""},{"location":"blog/category/docker-compose/","title":"Docker compose","text":""},{"location":"blog/category/docker-compose/#docker-compose","title":"docker-compose","text":""},{"location":"blog/category/celery/","title":"Celery","text":""},{"location":"blog/category/celery/#celery","title":"celery","text":""},{"location":"blog/category/postgresql/","title":"Postgresql","text":""},{"location":"blog/category/postgresql/#postgresql","title":"postgresql","text":""},{"location":"blog/category/linux/","title":"Linux","text":""},{"location":"blog/category/linux/#linux","title":"linux","text":""},{"location":"blog/category/i3/","title":"I3","text":""},{"location":"blog/category/i3/#i3","title":"i3","text":""},{"location":"blog/category/api/","title":"Api","text":""},{"location":"blog/category/api/#api","title":"api","text":""}]}