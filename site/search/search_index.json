{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Welcome <p>My name is Ssali Jonathan Kiggundu. I am a software engineer from Uganda. Besides my professional work, I also teach programming on my YouTube channel. Here, I will share some content I create as well as my thoughts, because this is my part of the big pie that is the internet. </p> <p> Github .     Blog .     Youtube .     Dev.to .     X .      LinkedIn </p>"},{"location":"about/","title":"About Me.","text":"<p>My name is Ssali Jonathan Kiggundu. I am a software engineer from Uganda. Besides my professional work, I also teach programming on my YouTube channel. Here, I will share some content I create as well as my thoughts, because this is my part of the big pie that is the internet. </p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2025/07/28/dockerize-a-django-application-with-postgresql-celery-redis-and-flower/","title":"Dockerize A Django Application With PostgreSQL, Celery, Redis and Flower","text":"<p>Welcome to this 5-part video series where we dive into creating a robust Django application, powered by a modern stack and containerized with Docker. We'll guide you through setting up a development environment with:</p> <ul> <li>PostgreSQL as the database</li> <li>Gunicorn as the web server</li> <li>Celery for task queue management</li> <li>Redis as the message broker</li> <li>Flower for monitoring Celery tasks</li> </ul> <p>Using Docker Compose, we\u2019ll bundle these components into a cohesive, easy-to-deploy environment. This setup simplifies development and ensures your app is ready to scale with a single command.</p>","tags":["django","docker-compose","docker","celery","postgresql"]},{"location":"blog/2025/07/28/dockerize-a-django-application-with-postgresql-celery-redis-and-flower/#introduction-and-project-set-up","title":"Introduction And Project Set Up","text":"<p>In this part of our series, we introduce an easy setup process and guide you through starting the simple Django project. We create the web application component, then Dockerize it and run it as a container.</p>","tags":["django","docker-compose","docker","celery","postgresql"]},{"location":"blog/2025/07/28/dockerize-a-django-application-with-postgresql-celery-redis-and-flower/#set-up-django-postgresql-using-docker-compose","title":"Set Up Django &amp; PostgreSQL using Docker Compose","text":"<p>Next, we integrate PostgreSQL as our database and introduce Docker Compose to manage multiple containers. We\u2019ll also preview the four additional services we\u2019ll set up, connect to the database, create tables, and run Django migrations.</p>","tags":["django","docker-compose","docker","celery","postgresql"]},{"location":"blog/2025/07/28/dockerize-a-django-application-with-postgresql-celery-redis-and-flower/#add-celery-background-tasks-with-redis","title":"Add Celery Background Tasks With Redis","text":"<p>Here, we add Celery for background task processing, configure it with a Redis container, and set up a dedicated Celery service to handle tasks efficiently.</p>","tags":["django","docker-compose","docker","celery","postgresql"]},{"location":"blog/2025/07/28/dockerize-a-django-application-with-postgresql-celery-redis-and-flower/#running-celery-background-tasks-in-django","title":"Running Celery Background Tasks In Django","text":"<p>This part focuses on resolving minor issues from the previous section, ensuring our background tasks run smoothly.</p>","tags":["django","docker-compose","docker","celery","postgresql"]},{"location":"blog/2025/07/28/dockerize-a-django-application-with-postgresql-celery-redis-and-flower/#monitor-celery-tasks-with-flower","title":"Monitor Celery Tasks With Flower","text":"<p>In this final part of our series, we add Flower, a monitoring dashboard for Celery tasks, which lets us track the status of Celery, view tasks, and check the results of tasks executed in the Task Queue. We also introduce Docker Compose Watch, a tool that streamlines our development workflow by syncing changes from our host machine to the Docker file system, enabling seamless updates.</p> <p>Just In case you find any of my work helpful and you can support it, consider doing so over on </p> <ul> <li> <p>Buy Me A Coffee</p> </li> <li> <p>Patreon</p> </li> </ul> <p>Thanks for visiting, Happy Coding</p>","tags":["django","docker-compose","docker","celery","postgresql"]},{"location":"blog/2024/07/28/fastapi-beyond-crud/","title":"FastAPI Beyond CRUD","text":"<p>This course material is tailored for my FastAPI Framework course. FastAPI has quickly emerged as one of Python's leading frameworks  for crafting server-side web applications. I'm excited to present this comprehensive course, dedicated to helping you understand API development with FastAPI. I trust you'll find immense value in it as we delve into the complexities of building robust APIs.</p>","tags":["fastapi"]},{"location":"blog/2024/07/28/fastapi-beyond-crud/#chapters","title":"Chapters","text":"<ul> <li>Installation and Project SetUp</li> <li>Creating a Simple Web Server</li> <li>Building a CRUD REST API</li> <li>Large Project Structure Using Routers</li> <li>Databases with SQLModel</li> <li>Finishing Up the CRUD</li> <li>Creating a user authentication model</li> <li>User Account Creation</li> <li>JWT Authentication</li> <li>Role-Based Access Control</li> <li>Model And Schema Relationships</li> <li>Error Handling</li> <li>Middleware</li> <li>Email Support</li> <li>Background Processing</li> <li>API Documentation</li> </ul>","tags":["fastapi"]},{"location":"blog/2025/07/06/my-linux-setup-for-programming/","title":"My linux setup for programming","text":"<p>This video is one I made to show my Linux Setup for work and software development. </p>","tags":["python","websockets"]},{"location":"blog/2025/07/06/my-linux-setup-for-programming/#why-i-use-linux","title":"Why I use Linux?","text":"<p>People choose Linux over operating systems like macOS or Windows for several reasons, which can differ based on individual perspectives. For me, it comes down to three key factors:</p> <ul> <li>Open-source and cost-free</li> <li>Highly customizable</li> <li>Reliable and stable</li> </ul>","tags":["python","websockets"]},{"location":"blog/2025/07/06/my-linux-setup-for-programming/#open-source-and-cost-free","title":"Open-Source and Cost-Free","text":"<p>Linux is free and open-source software (FOSS), meaning its source code is publicly available, and users can download, use, modify, and distribute it without any licensing fees. Unlike Windows, which requires purchasing a license, or macOS, which is tied to Apple's proprietary hardware, Linux distributions (distros) like Ubuntu, Fedora, or Debian are available at no cost. This makes Linux accessible to individuals, businesses, and organizations with limited budgets.    The open-source nature also fosters a community-driven development model. Developers worldwide contribute to Linux, ensuring transparency, security, and continuous improvement. Users can inspect the code to verify it meets their needs or lacks malicious elements, which is not possible with proprietary systems like Windows or macOS. For those who value software freedom and want to avoid vendor lock-in, Linux\u2019s open-source philosophy is a major draw.</p>","tags":["python","websockets"]},{"location":"blog/2025/07/06/my-linux-setup-for-programming/#highly-customizable","title":"Highly Customizable","text":"<p>Linux offers unparalleled flexibility, allowing users to tailor the operating system to their specific needs and preferences. Unlike macOS or Windows, which have rigid interfaces and limited customization options, Linux provides a variety of desktop environments (e.g., GNOME, KDE Plasma, XFCE) and window managers (e.g., i3, Openbox) that cater to different workflows and aesthetic preferences. Users can modify everything from the look and feel of the interface to system-level functionality.    For advanced users, Linux\u2019s command-line interface (CLI) and scripting capabilities enable deep system tweaks, automation, and optimization. Developers, for instance, can configure Linux to create highly efficient programming environments, while hobbyists can build lightweight systems for older hardware. This level of control is particularly appealing to power users, tech enthusiasts, and those who want a system that aligns perfectly with their workflow, something macOS and Windows cannot match due to their standardized, one-size-fits-all approach.</p>","tags":["python","websockets"]},{"location":"blog/2025/07/06/my-linux-setup-for-programming/#reliable-and-stable","title":"Reliable and Stable","text":"<p>Linux is renowned for its stability and robustness, making it a preferred choice for servers, supercomputers, and critical infrastructure. Many Linux distros, such as CentOS or Debian Stable, are designed to run for years without requiring reboots, except for critical kernel updates. This reliability stems from Linux\u2019s modular design and rigorous testing by the community or enterprise maintainers (e.g., Red Hat, Canonical).    Compared to Windows, which can suffer from slowdowns, bloatware, or unexpected updates that disrupt workflows, Linux systems are leaner and less prone to crashes. macOS is stable but tightly coupled to Apple\u2019s ecosystem, limiting hardware choices and exposing users to planned obsolescence. Linux, by contrast, runs efficiently on a wide range of hardware, from low-end devices to high-performance machines, and its long-term support (LTS) releases ensure consistent performance over time. For users prioritizing dependability\u2014whether for personal use, development, or enterprise applications\u2014Linux\u2019s stability is a significant advantage.</p> <p>These factors combine to make Linux an attractive alternative for those who value cost savings, creative control, and a dependable computing experience. While macOS and Windows may suit users who prefer polished, out-of-the-box experiences, Linux appeals to those who want a system they can fully own and optimize.</p>","tags":["python","websockets"]},{"location":"blog/2025/07/06/my-linux-setup-for-programming/#a-tour-of-my-desktop","title":"A tour of my Desktop","text":"<p>Here I will give you a tour of my Destktop showing you what I use daily.</p>","tags":["python","websockets"]},{"location":"blog/2025/07/06/my-linux-setup-for-programming/#my-computer","title":"My Computer","text":"<p>I use an HP ProBook 440 G4 equipped with 16GB of RAM, a 256GB SSD, and an additional 1TB HDD for extra storage. It features a 7th-generation Intel i7 quad-core processor running at 3.1GHz, and I rely on integrated graphics without a dedicated GPU.</p> <p></p>","tags":["python","websockets"]},{"location":"blog/2025/07/06/my-linux-setup-for-programming/#window-manager-theming","title":"Window Manager &amp; Theming","text":"<p>I use i3 as my window manager for its simplicity and keyboard-driven workflow. My entire desktop is themed with the Dracula color scheme, which I apply to i3, GTK, and terminal applications for a consistent look. For window transparency and effects, I run picom as my compositor.</p>","tags":["python","websockets"]},{"location":"blog/2025/07/06/my-linux-setup-for-programming/#application-launcher","title":"Application Launcher","text":"<p>For quickly launching applications, I rely on rofi. It's lightweight, highly customizable, and fits perfectly with my Dracula-themed setup.</p>","tags":["python","websockets"]},{"location":"blog/2025/07/06/my-linux-setup-for-programming/#terminal-tools","title":"Terminal &amp; Tools","text":"<p>My terminal of choice is Terminator because of its split panes and easy configuration. I use pyenv to manage multiple Python versions, which is essential for working on different projects.</p>","tags":["python","websockets"]},{"location":"blog/2025/07/06/my-linux-setup-for-programming/#development-utilities","title":"Development Utilities","text":"<ul> <li>LazyDocker: A simple terminal UI for managing Docker containers and images.</li> <li>Git: For version control, integrated with my terminal and editors.</li> <li>VS Code or Neovim: Depending on the project, I switch between these editors, both themed with Dracula.</li> </ul> <p>This setup keeps my workflow efficient, visually cohesive, and highly customizable for programming on Linux.</p>","tags":["python","websockets"]},{"location":"talks/","title":"Talks","text":"<ul> <li>Full-Stack Python Web Development: Introducing Reflex |PyCon Uganda 2024</li> </ul>"},{"location":"talks/pycon_uganda_2024/","title":"Pycon uganda 2024","text":""},{"location":"talks/pycon_uganda_2024/#my-first-experience-speaking-at-pycon","title":"My First Experience Speaking at PyCon","text":"<p>Last year, I had the incredible opportunity to speak at PyCon Uganda 2024. As someone who has attended many conferences as a participant, stepping onto the stage as a speaker for the first time was both exciting and nerve-wracking.</p>"},{"location":"talks/pycon_uganda_2024/#preparing-for-the-talk","title":"Preparing for the Talk","text":"<p>The preparation process was intense. I spent weeks refining my slides, practicing my delivery, and anticipating questions from the audience. I wanted to make sure my talk was engaging and informative, and that it would resonate with both beginners and experienced Python developers.</p>"},{"location":"talks/pycon_uganda_2024/#the-day-of-the-talk","title":"The Day of the Talk","text":"<p>On the day of my talk, I arrived early to get comfortable with the venue. The support from the PyCon Uganda team was fantastic\u2014they made sure everything ran smoothly. As the time reached for my talk, I felt a mix of nerves and excitement.</p> <p>Once I started speaking, my nerves quickly faded. The audience was attentive and supportive, and I could see people nodding along and taking notes. Sharing my experiences and insights with the community was incredibly rewarding.</p>"},{"location":"talks/pycon_uganda_2024/#lessons-learned","title":"Lessons Learned","text":"<p>Speaking at PyCon taught me a lot about communication, preparation, and the power of community. I received thoughtful questions and feedback that helped me see my topic from new perspectives. </p>"},{"location":"talks/pycon_uganda_2024/#looking-ahead","title":"Looking Ahead","text":"<p>I\u2019m grateful for the experience and encourage anyone considering submitting a talk to go for it! It\u2019s a fantastic way to grow, learn, and give back to the community.</p>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/programming/","title":"programming","text":""},{"location":"blog/category/django/","title":"django","text":""},{"location":"blog/category/docker-compose/","title":"docker-compose","text":""},{"location":"blog/category/docker/","title":"docker","text":""},{"location":"blog/category/celery/","title":"celery","text":""},{"location":"blog/category/postgresql/","title":"postgresql","text":""},{"location":"blog/category/linux/","title":"linux","text":""},{"location":"blog/category/i3/","title":"i3","text":""},{"location":"blog/category/fastapi/","title":"fastapi","text":""},{"location":"blog/category/python/","title":"python","text":""},{"location":"blog/category/api/","title":"api","text":""}]}