{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"jod35","text":"Welcome <p>My name is Ssali Jonathan Kiggundu. I am a software engineer from Uganda. Besides my professional work, I also teach programming on my YouTube channel. Here, I will share some content I create as well as my thoughts, because this is my part of the big pie that is the internet. </p> <p> Blog .     Youtube .     Dev.to .     X .      LinkedIn </p>"},{"location":"about/","title":"About Me.","text":"<p>My name is Ssali Jonathan Kiggundu. I am a software engineer from Uganda. Besides my professional work, I also teach programming on my YouTube channel. Here, I will share some content I create as well as my thoughts, because this is my part of the big pie that is the internet. </p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2025/07/07/understanding-websockets-with-python/","title":"Understanding Websockets with Python","text":"<p>This guide will help you build real-time applications using Python and WebSockets. So, what are WebSockets?</p> <p>WebSockets are a network protocol that enables real-time, two-way communication between a client and a server over a single TCP connection. </p> <p>Unlike traditional HTTP requests, WebSockets allow continuous data exchange without repeated requests, making them ideal for applications like chat systems or live data updates.</p>","tags":["python","websockets"]},{"location":"blog/2025/07/07/understanding-websockets-with-python/#how-do-websockets-work","title":"How Do WebSockets Work?","text":"<p>WebSockets operate through the following steps:</p> <ol> <li> <p>Opening Handshake    The client sends an HTTP GET request with a WebSocket upgrade header. The server responds with a 101 Switching Protocols status code if successful, establishing the WebSocket connection.</p> </li> <li> <p>Exchanging Messages    After the handshake, the client and server can send data or control messages back and forth in real time over the persistent connection.</p> </li> <li> <p>Closing Handshake    When either the client or server terminates the connection, a closing handshake is performed, and the connection is closed.</p> </li> </ol>","tags":["python","websockets"]},{"location":"blog/2025/07/07/understanding-websockets-with-python/#implementing-a-websocket-server-using-python","title":"Implementing a WebSocket Server Using Python","text":"<p>In this section, we'll create a simple WebSocket server using the Python websockets library.</p>","tags":["python","websockets"]},{"location":"blog/2025/07/07/understanding-websockets-with-python/#installing-the-websockets-library","title":"Installing the WebSockets Library","text":"<p>Set up a virtual environment and install the <code>websockets</code> library:</p> <pre><code>python -m venv env\nsource env/bin/activate  # On Windows, use: env\\Scripts\\activate\npip install websockets\n</code></pre>","tags":["python","websockets"]},{"location":"blog/2025/07/07/understanding-websockets-with-python/#creating-the-websocket-server","title":"Creating the WebSocket Server","text":"<p>We'll define a function to handle client connections. Create a file named <code>server.py</code> with the following code:</p> <pre><code>from websockets.asyncio.server import ServerConnection\n\nasync def say_hello(websocket: ServerConnection):\n    await websocket.send(\"Hello World!\")\n</code></pre> <p>This defines an asynchronous <code>say_hello</code> function that takes a <code>websocket</code> object (representing a client connection) and sends the message <code>\"Hello World!\"</code> to the client. The <code>await</code> keyword ensures the send operation is asynchronous.</p> <p>To serve this function, we need to set up a WebSocket server. Update <code>server.py</code> as follows:</p> <pre><code>import asyncio\nfrom websockets.asyncio.server import ServerConnection, serve\n\nasync def say_hello(websocket: ServerConnection):\n    await websocket.send(\"Hello World!\")\n\nasync def main():\n    async with serve(say_hello, \"localhost\", 8005) as server:\n        await server.serve_forever() # Run the server indefinitely\n</code></pre> <p>In this code, we import <code>asyncio</code> and the <code>serve</code> function from <code>websockets.asyncio.server</code>. We define an asynchronous <code>main</code> function that starts the WebSocket server using <code>serve</code>, passing the <code>say_hello</code> handler, <code>\"localhost\"</code> as the host, and <code>8005</code> as the port. </p> <p>The server is kept running indefinitely by calling the <code>server.serve()</code> method. To execute the asynchronous <code>main</code> function, we use <code>asyncio.run</code>. Below is the complete <code>server.py</code> file:</p> <pre><code>import asyncio\nfrom websockets.asyncio.server import ServerConnection, serve\n\nasync def say_hello(websocket: ServerConnection):\n    await websocket.send(\"Hello World!\")\n\nasync def main():\n    async with serve(say_hello, \"localhost\", 8005) as server:\n        await server.serve_forever()  # Run the server indefinitely\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>","tags":["python","websockets"]},{"location":"blog/2025/07/07/understanding-websockets-with-python/#explanation-of-the-server-code","title":"Explanation of the Server Code","text":"<p>The server code consists of a handler function, <code>say_hello</code>, which defines the behavior for each client connection by sending a <code>\"Hello World!\"</code> message to the client. The <code>main</code> function sets up the server using the <code>serve</code> function, which creates a WebSocket server bound to <code>localhost</code> on port <code>8005</code>.</p> <p>The use of the <code>async with</code> context manager ensures that the server is properly cleaned up when it shuts down. The server is started by calling <code>asyncio.run(main())</code>, which runs the event loop and keeps the server running until it is interrupted (for example, by pressing Ctrl+C). By default, the server listens only on the local machine at the specified port.</p>","tags":["python","websockets"]},{"location":"blog/2025/07/07/understanding-websockets-with-python/#running-the-server","title":"Running the Server","text":"<p>To test the server: 1. Save the code in <code>server.py</code>. 2. Activate your virtual environment and ensure <code>websockets</code> is installed. 3. Run the server with:    <pre><code>python server.py\n</code></pre> 4. The server will listen for WebSocket connections at <code>ws://localhost:8005</code>.</p> <p>You can test it using a WebSocket client (e.g., a browser with JavaScript or a Python client using <code>websockets</code>). Upon connecting, the client will receive the <code>\"Hello World!\"</code> message.</p>","tags":["python","websockets"]},{"location":"projects/","title":"Projects","text":"<p>This is a collection of projects I have worked on</p> <ul> <li>FastAPI Beyond CRUD 2024</li> </ul>"},{"location":"projects/fastapi_beyond_crud_2024/","title":"FastAPI Beyond CRUD Full Course - A FastAPI Course","text":"<p>FastAPI Beyond CRUD is a course on FastAPI that helps everyone learn how to build APIs for the web. This guide will show you some concepts that are used to build real-world backend applications.</p>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/category/python/","title":"python","text":""},{"location":"blog/category/websockets/","title":"websockets","text":""}]}