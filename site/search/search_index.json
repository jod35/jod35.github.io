{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome My name is Ssali Jonathan Kiggundu. I am a software engineer from Uganda. Besides my professional work, I also teach programming on my YouTube channel . Here, I will share some content I create as well as my thoughts, because this is my part of the big pie that is the internet.","title":"Home"},{"location":"about/","text":"About Me. My name is Ssali Jonathan Kiggundu. I am a software engineer from Uganda. Besides my professional work, I also teach programming on my YouTube channel . Here, I will share some content I create as well as my thoughts, because this is my part of the big pie that is the internet.","title":"About"},{"location":"about/#about-me","text":"My name is Ssali Jonathan Kiggundu. I am a software engineer from Uganda. Besides my professional work, I also teach programming on my YouTube channel . Here, I will share some content I create as well as my thoughts, because this is my part of the big pie that is the internet.","title":"About Me."},{"location":"posts/Reflex%20Investment%20Application/","text":"1. Introduction Reflex is a web framework that allows you build full-stack web applications using Pure Python. This gives a chance to people with little to know JavaScript knowledge to ship apps with Python. 2. Project Set Up Install Reflex Installing Reflex is done through pip with pip install reflex Creating a Reflex project Creating a Reflex project can be done through the Reflex CLI. This can be accessed using the reflex command. reflex --help shows all commands reflex init helps you create a project (selecting a template) 3. Basic Folder Structure Explained .web is a folder that the compiled JavaScript code (NextJS application) will reside assets static assets like CSS, images and JS are stored here <the main project folder> is where all source code for the application will be .gitignore git ignore for the project requirements.txt shows the requirements file for the project rxconfig.py is the main configuration file for your project (Will Discuss this later) 4. Basic Concepts Inside the main project folder is the main app code. which looks something like this. #<main-project-folder>/<project-name.py> \"\"\"Welcome to Reflex! This file outlines the steps to create a basic app.\"\"\" import reflex as rx from rxconfig import config class State ( rx . State ): .. \"\"\"The app state.\"\"\" def index () -> rx . Component : # Welcome Page (Index) return rx . container ( rx . color_mode . button ( position = \"top-right\" ), rx . vstack ( rx . heading ( \"Welcome to Reflex!\" , size = \"9\" ), rx . text ( \"Get started by editing \" , rx . code ( f \" { config . app_name } / { config . app_name } .py\" ), size = \"5\" , ), rx . link ( rx . button ( \"Check out our docs!\" ), href = \"https://reflex.dev/docs/getting-started/introduction/\" , is_external = True , ), spacing = \"5\" , justify = \"center\" , min_height = \"85vh\" , ), rx . logo (), ) app = rx . App () app . add_page ( index ) Your entire app will be created from the app instance created from rx.App() . app = rx . App () Keep in mind that the we access all reflex objects (functions, classes) from the rx namespace that we have created by doing so. import reflex as rx Creating a page is simple, we have to create a function that returns a reflex component. def index () -> rx . Component : ... We can then return some UI components using Reflex's in-built front-end components. def index () -> rx . Component : # Welcome Page (Index) return rx . container ( rx . color_mode . button ( position = \"top-right\" ), rx . vstack ( rx . heading ( \"Welcome to Reflex!\" , size = \"9\" ), rx . text ( \"Get started by editing \" , rx . code ( f \" { config . app_name } / { config . app_name } .py\" ), size = \"5\" , ), rx . link ( rx . button ( \"Check out our docs!\" ), href = \"https://reflex.dev/docs/getting-started/introduction/\" , is_external = True , ), spacing = \"5\" , justify = \"center\" , min_height = \"85vh\" , ), rx . logo (), ) Reflex UI components are built from Radix UI . A JavaScript UI component library. So you can just access each of them through rx namespace. Here are more UI compoenents from Reflex. To register the newly created page, you will use the add_page method that we call from the app instead we created. # <project-name>/<project-name>.py import reflex as rx def index () -> rx . Component : # Welcome Page (Index) return rx . container ( rx . color_mode . button ( position = \"top-right\" ), rx . vstack ( rx . heading ( \"Welcome to Reflex!\" , size = \"9\" ), rx . text ( \"Get started by editing \" , rx . code ( f \" { config . app_name } / { config . app_name } .py\" ), size = \"5\" , ), rx . link ( rx . button ( \"Check out our docs!\" ), href = \"https://reflex.dev/docs/getting-started/introduction/\" , is_external = True , ), spacing = \"5\" , justify = \"center\" , min_height = \"85vh\" , ), rx . logo (), ) app = rx . App () app . add_page ( index ) One important line is one that imports the config for the project. from rxconfig import config Let us take a look at the config. Inside rxconfig.py import reflex as rx config = rx . Config ( app_name = \"investment_app\" , plugins = [ rx . plugins . TailwindV3Plugin ()], ) All reflex config is done using the rx.Config class in here we get to provide attributes for the settings reflex expects, some of them include - app_name The name of the app - app_module_import The path to the app module - loglevel The loglevel - frontend_port the frontend port - backend_port the backend port - db_url the URI to the database - redis_url the Redis URI etc. For our case, we have a plugins attribute, which is adding a list of plugins we want to add to the app. We have the TailwindV3Plugin to allow us have support for Tailwind CSS 5. Build the Project UI In this tutorial we shall build an investment app. a simple one. Nothing fancy. let us run the app. reflex run This will display the welcome page below. ![[welcome page.png]] Components Components create reusable parts of your UI. Let us create a simple UI component. #inside <project-name>.py def investment () -> rx . Component : return rx . box ( rx . heading ( \"Basic Investment\" ), rx . text ( \"Interest (%): 10%\" ), rx . text ( \"Min Amount: $ 300\" ), rx . text ( \"Maturity Period: 365 days\" ), ) Let us modify the code in our main page index to make use of our new custom component. # ... The imports def investment () -> rx . Component : return rx . box ( rx . heading ( \"Basic Investment\" ), rx . text ( \"Interest (%): 10%\" ), rx . text ( \"Min Amount: $ 300\" ), rx . text ( \"Maturity Period: 365 days\" ), ) def index () -> rx . Component : # Welcome Page (Index) return rx . container ( investment (), investment () ) # ... the rest of the code ![[Screenshot from 2025-05-29 12-53-54.png]] We can add some styling by using the style prop that takes a dictionary of CSS styles as shown below def investment () -> rx . Component : return rx . box ( rx . heading ( \"Basic Investment\" ), rx . text ( \"Interest (%): 10%\" ), rx . text ( \"Min Amount: $ 300\" ), rx . text ( \"Maturity Period: 365 days\" ), style = { } ) Note My default theme is dark. That is why you see my app dark. But you can change your theme using the following set up in your app instance. app = rx . App ( theme = rx . theme ( appearance = \"light\" ) ) This allows us to have my them changed to a light one.","title":"Reflex Investment Application"},{"location":"posts/websockets-with-python/","text":"Learn How to Use WebSockets with Python What Are WebSockets? This guide will help you build real-time applications using Python and WebSockets. So, what are WebSockets? WebSockets are a network protocol that enables real-time, two-way communication between a client and a server over a single TCP connection. Unlike traditional HTTP requests, WebSockets allow continuous data exchange without repeated requests, making them ideal for applications like chat systems or live data updates. How Do WebSockets Work? WebSockets operate through the following steps: Opening Handshake The client sends an HTTP GET request with a WebSocket upgrade header. The server responds with a 101 Switching Protocols status code if successful, establishing the WebSocket connection. Exchanging Messages After the handshake, the client and server can send data or control messages back and forth in real time over the persistent connection. Closing Handshake When either the client or server terminates the connection, a closing handshake is performed, and the connection is closed. Implementing a WebSocket Server Using Python In this section, we'll create a simple WebSocket server using the Python websockets library. Installing the WebSockets Library Set up a virtual environment and install the websockets library: python -m venv env source env/bin/activate # On Windows, use: env\\Scripts\\activate pip install websockets Creating the WebSocket Server We'll define a function to handle client connections. Create a file named server.py with the following code: from websockets.asyncio.server import ServerConnection async def say_hello ( websocket : ServerConnection ): await websocket . send ( \"Hello World!\" ) This defines an asynchronous say_hello function that takes a websocket object (representing a client connection) and sends the message \"Hello World!\" to the client. The await keyword ensures the send operation is asynchronous. To serve this function, we need to set up a WebSocket server. Update server.py as follows: import asyncio from websockets.asyncio.server import ServerConnection , serve async def say_hello ( websocket : ServerConnection ): await websocket . send ( \"Hello World!\" ) async def main (): async with serve ( say_hello , \"localhost\" , 8005 ) as server : await server . serve_forever () # Run the server indefinitely In this code, we import asyncio and the serve function from websockets.asyncio.server . We define an asynchronous main function that starts the WebSocket server using serve , passing the say_hello handler, \"localhost\" as the host, and 8005 as the port. The server is kept running indefinitely by calling the server.serve() method. To execute the asynchronous main function, we use asyncio.run . Below is the complete server.py file: import asyncio from websockets.asyncio.server import ServerConnection , serve async def say_hello ( websocket : ServerConnection ): await websocket . send ( \"Hello World!\" ) async def main (): async with serve ( say_hello , \"localhost\" , 8005 ) as server : await server . serve_forever () # Run the server indefinitely if __name__ == \"__main__\" : asyncio . run ( main ()) Explanation of the Server Code The server code consists of a handler function, say_hello , which defines the behavior for each client connection by sending a \"Hello World!\" message to the client. The main function sets up the server using the serve function, which creates a WebSocket server bound to localhost on port 8005 . The use of the async with context manager ensures that the server is properly cleaned up when it shuts down. The server is started by calling asyncio.run(main()) , which runs the event loop and keeps the server running until it is interrupted (for example, by pressing Ctrl+C). By default, the server listens only on the local machine at the specified port. Running the Server To test the server: 1. Save the code in server.py . 2. Activate your virtual environment and ensure websockets is installed. 3. Run the server with: python server.py 4. The server will listen for WebSocket connections at ws://localhost:8005 . You can test it using a WebSocket client (e.g., a browser with JavaScript or a Python client using websockets ). Upon connecting, the client will receive the \"Hello World!\" message.","title":"Understand Websockets with Python"},{"location":"posts/websockets-with-python/#learn-how-to-use-websockets-with-python","text":"","title":"Learn How to Use WebSockets with Python"},{"location":"projects/","text":"Projects This is a collection of projects I have worked on FastAPI Beyond CRUD 2024","title":"Index"},{"location":"projects/#projects","text":"This is a collection of projects I have worked on FastAPI Beyond CRUD 2024","title":"Projects"},{"location":"projects/fastapi_beyond_crud_2024/","text":"FastAPI Beyond CRUD Full Course - A FastAPI Course FastAPI Beyond CRUD is a course on FastAPI that helps everyone learn how to build APIs for the web. This guide will show you some concepts that are used to build real-world backend applications.","title":"Fastapi beyond crud 2024"},{"location":"projects/fastapi_beyond_crud_2024/#fastapi-beyond-crud-full-course-a-fastapi-course","text":"FastAPI Beyond CRUD is a course on FastAPI that helps everyone learn how to build APIs for the web. This guide will show you some concepts that are used to build real-world backend applications.","title":"FastAPI Beyond CRUD Full Course - A FastAPI Course"}]}